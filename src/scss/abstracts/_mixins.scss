// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &.active,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// Make media queries smarter
@include breakpoint-set('to ems', true);

@mixin _mq($min, $max: '') {
  @if $max == '' {
    @include breakpoint(map-get($breakpoints, $min)) {
      @content;
    }
  } @else {
    @if $min == 'max' {
      @include breakpoint('max-width' (map-get($breakpoints, $max) - 1)) {
        @content;
      }
    } @else {
      @include breakpoint(
        ((map-get($breakpoints, $min))
        (map-get($breakpoints, $max) - 1))) {
        @content;
      }
    }
  }
}

@mixin susy-use(
  $config
) {
  //  parse and normalize any shorthand arguments
  $config: susy-compile($config);

  // record the global settings -
  // and update the global variable with our new settings
  $global: $susy;
  $susy: map-merge($susy, $config) !global;

  // any content inside this mixin
  // will use the local settings
  @content;

  // return the global variable to its initial value
  $susy: $global !global;
}


///
/// Helper function to easily use an SVG inline in CSS
/// without encoding it to base64, saving bytes.
/// It also helps with browser support.
////

/// A small function allowing skipping base64 encoding
/// and simply pasting the SVG markup right in the CSS.
/// @author Jakob Eriksen
/// @link http://codepen.io/jakob-e/pen/doMoML
/// @param {String} $svg - SVG image to encode
/// @return {String} - Encoded SVG data uri
@function svg-uri($svg) {
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);

  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    $chunk: str-replace($chunk, '"', "'");
    $chunk: str-replace($chunk, '%', '%25');
    $chunk: str-replace($chunk, '{', '%7B');
    $chunk: str-replace($chunk, '}', '%7D');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }

  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @link http://sassmeister.com/gist/1b4f2da5527830088e4d
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
      @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// responsive font size mixin v1
// @mixin font-size-map() {
//   @each $breakpoints, $font-size in $html-font-size {
//     @include _mq($breakpoints) {
//       font-size: $font-size;
//     }
//   }
// }

// responsive font size mixin v2
@mixin font-size-map() {
  $last-output: null;
  @each $key, $value in $html-font-size {
    @if $last-output != $value {
      @include _mq($key) {
        font-size: $value;
      }
    }
    $last-output: $value;
  }
}

@mixin get-dot-bg($dotWidth, $dotColor) {
    background-image:svg-uri('<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%"><rect y="50%" x="50%" width="#{$dotWidth}" height="#{$dotWidth}" fill="#{$dotColor}"/></svg>');
    background-position: left top;
};

@mixin Ie11() {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
     @content;
  }
}

@mixin Edge() {
  @supports (-ms-accelerator:true) {
     @content;
  }
}
