// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@use "sass:math";
@use 'sass:map';

@mixin on-event($self: false) {
    @if $self {
        &.active,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

@mixin susy-use($config) {
    //  parse and normalize any shorthand arguments
    $config: susy-compile($config);

    // record the global settings -
    // and update the global variable with our new settings
    $global: $susy;
    $susy: map-merge($susy, $config) !global;

    // any content inside this mixin
    // will use the local settings
    @content;

    // return the global variable to its initial value
    $susy: $global !global;
}

///
/// Helper function to easily use an SVG inline in CSS
/// without encoding it to base64, saving bytes.
/// It also helps with browser support.
////

/// A small function allowing skipping base64 encoding
/// and simply pasting the SVG markup right in the CSS.
/// @author Jakob Eriksen
/// @link http://codepen.io/jakob-e/pen/doMoML
/// @param {String} $svg - SVG image to encode
/// @return {String} - Encoded SVG data uri
@function svg-uri($svg) {
    $encoded: '';
    $slice: 2000;
    $index: 0;
    $loops: ceil(math.div(str-length($svg), $slice));

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        $chunk: str-replace($chunk, '"', "'");
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url('data:image/svg+xml;charset=utf8,#{$encoded}');
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @link http://sassmeister.com/gist/1b4f2da5527830088e4d
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(
                str-slice($string, $index + str-length($search)),
                $search,
                $replace
            );
    }

    @return $string;
}

// responsive font size mixin v2
@mixin font-size-map() {
    $last-output: null;

    @each $key, $value in $html-font-size {
        @if $last-output != $value {
            @include mq($from: $key) {
                font-size: $value;
            }
        }
        $last-output: $value;
    }
}

@mixin get-dot-bg($dotWidth, $dotColor) {
    background-image: svg-uri(
        '<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%"><rect y="50%" x="50%" width="#{$dotWidth}" height="#{$dotWidth}" fill="#{$dotColor}"/></svg>'
    );
    background-position: left top;
}

@mixin Ie11() {
    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
        @content;
    }
}

@mixin Edge() {
    @supports (-ms-accelerator: true) {
        @content;
    }
}

@function strip-unit($value) {
    @return math.div($value, $value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
        & {
            font-size: $min-font-size;

            @media screen and (min-width: $min-vw) {
                font-size: -webkit-calc(
                    #{$min-font-size} + #{strip-unit(
                            $max-font-size - $min-font-size
                        )} *
                        (
                            (100vw - #{$min-vw}) / #{strip-unit(
                                    $max-vw - $min-vw
                                )}
                        )
                );
                font-size: calc(
                    #{$min-font-size} + #{strip-unit(
                            $max-font-size - $min-font-size
                        )} *
                        (
                            (100vw - #{$min-vw}) / #{strip-unit(
                                    $max-vw - $min-vw
                                )}
                        )
                );
            }

            @media screen and (min-width: $max-vw) {
                font-size: $max-font-size;
            }
        }
    }
}

// Read the article: http://sassbreak.com/viewport-relative-headings-with-sass

// Function
@function get-vw($target, $max-breakpoint-fluid) {
    // 1 vw is equal to 1% of the viewport width
    $vw-context: ($max-breakpoint-fluid * 0.01) * 1px; // 1% viewport width

    @return math.div($target, $vw-context) * 1vw;
}

// Mixin
@mixin vw($size, $max-breakpoint-fluid, $use-breakpoint: true) {
    font-size: get-vw($size, $max-breakpoint-fluid);
    // Prevent font-size from getting too big

    @if $use-breakpoint {
        @media (min-width: #{$max-breakpoint-fluid}px) {
            font-size: $size;
        }
    }
}

@mixin fluidElementWH(
    $imgW,
    $imgH,
    $max-breakpoint-fluid,
    $use-breakpoint: true
) {
    $widthW: math.div(100 * $imgW, $max-breakpoint-fluid);
    $heightH: math.div($widthW * $imgH, $imgW);

    height: $heightH * 1vw;
    width: $widthW * 1vw;

    @if $use-breakpoint {
        @media (min-width: #{$max-breakpoint-fluid}px) {
            width: $imgW * 1px;
            height: $imgH * 1px;
        }
    }
}

@mixin fluidElementW($imgW, $max-breakpoint-fluid, $use-breakpoint: true) {
    $widthW: math.div(100 * $imgW, $max-breakpoint-fluid);

    width: $widthW * 1vw;

    @if $use-breakpoint {
        @media (min-width: #{$max-breakpoint-fluid}px) {
            width: $imgW * 1px;
        }
    }
}

@mixin resetBtn {
    border: none;
    margin: 0;
    padding: 0;
    width: auto;
    overflow: visible;
    background: transparent;
    color: inherit;
    font: inherit;
    line-height: normal;
    -webkit-font-smoothing: inherit;
    -moz-osx-font-smoothing: inherit;
    -webkit-appearance: none;

    &::-moz-focus-inner {
        border: 0;
        padding: 0;
    }
}

// Grid

@mixin debug-grid(
    $max-width: false,
    $g: $grid-config,
    $show-br: $mq-show-breakpoints
) {
    @include mq-show-breakpoints($show-br);

    body::after {
        content: '';
        position: fixed;
        z-index: 10000;
        top: 0;
        right: 0;
        left: 0;
        width: 100%;
        height: 100%;
        margin-inline: auto;
        pointer-events: none;

        @if $max-width {
            max-width: map.get($mq-breakpoints, $max-width);
        }

        @each $mq, $grid in $g {
            @include mq($mq) {
                background: sass-grid($grid);
            }
        }
    }
}
